{
    "openapi": "3.0.1",
    "info": {
        "title": "Dispatch",
        "version": "1.0"
    },
    "servers": [
        {
            "url": "https://api-integration.servicetitan.io/dispatch/v2"
        }
    ],
    "paths": {
        "/tenant/{tenant}/gps-provider/{gps_provider}/gps-pings": {
            "post": {
                "tags": [
                    "Gps"
                ],
                "summary": "Creates new gps ping.",
                "description": "Creates new gps ping.",
                "operationId": "Gps_Create",
                "parameters": [
                    {
                        "name": "gps_provider",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Dispatch.V2.GpsPingCreateRequest"
                                }
                            },
                            "example": [
                                {
                                    "unitId": "string",
                                    "unitName": "string",
                                    "eventTime": "string",
                                    "latitude": 0,
                                    "longitude": 0,
                                    "speed": 0,
                                    "street": "string",
                                    "city": "string",
                                    "region": "string",
                                    "postalCode": "string",
                                    "message": "string",
                                    "externalId": "string",
                                    "isNew": true,
                                    "statusMessage": "string"
                                }
                            ]
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Dispatch.V2.GpsPingResponse"
                                    }
                                },
                                "example": [
                                    {
                                        "externalId": "string",
                                        "status": {},
                                        "message": "string"
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tenant/{tenant}/appointment-assignments": {
            "get": {
                "tags": [
                    "AppointmentAssignments"
                ],
                "summary": "Gets a list of appointment assignments",
                "description": "Gets a list of appointment assignments",
                "operationId": "AppointmentAssignments_GetList",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "Perform lookup by multiple IDs (maximum 50)",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "name": "appointmentIds",
                        "in": "query",
                        "description": "Return appointment assignments for one or more appointments",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "name": "jobId",
                        "in": "query",
                        "description": "Return appointment assignments for a single job",
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "nullable": true
                        }
                    },
                    {
                        "name": "createdBefore",
                        "in": "query",
                        "description": "Return items created before certain date/time (in UTC)",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "createdOnOrAfter",
                        "in": "query",
                        "description": "Return items created on or after certain date/time (in UTC)",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "modifiedBefore",
                        "in": "query",
                        "description": "Return items modified before certain date/time (in UTC)",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "modifiedOnOrAfter",
                        "in": "query",
                        "description": "Return items modified on or after certain date/time (in UTC)",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The logical number of page to return, starting from 1",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": true
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "How many records to return (50 by default)",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": true
                        }
                    },
                    {
                        "name": "includeTotal",
                        "in": "query",
                        "description": "Whether total count should be returned",
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Applies sorting by the specified field:\\\n\"?sort=+FieldName\" for ascending order,\\\n\"?sort=-FieldName\" for descending order.\\\n\\\nAvailable fields are: Id, CreatedOn, ModifiedOn.",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "name": "active",
                        "in": "query",
                        "description": "What kind of items should be returned (only active items will be returned by default)\\\nValues: [True, Any, False]",
                        "schema": {
                            "type": "string",
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ActiveRequestArg"
                                }
                            ],
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedResponse_Of_Dispatch.V2.AppointmentAssignmentResponse"
                                },
                                "example": {
                                    "page": 0,
                                    "pageSize": 0,
                                    "hasMore": true,
                                    "totalCount": 0,
                                    "data": [
                                        {
                                            "id": 0,
                                            "technicianId": 0,
                                            "technicianName": "string",
                                            "assignedById": 0,
                                            "assignedOn": "string",
                                            "status": {},
                                            "isPaused": true,
                                            "jobId": 0,
                                            "appointmentId": 0,
                                            "createdOn": "string",
                                            "modifiedOn": "string",
                                            "active": true
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tenant/{tenant}/appointment-assignments/assign-technicians": {
            "post": {
                "tags": [
                    "AppointmentAssignments"
                ],
                "summary": "Assigns the list of technicians to the appointment",
                "description": "Assigns the list of technicians to the appointment",
                "operationId": "AppointmentAssignments_AssignTechnicians",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Dispatch.V2.AssignTechniciansRequest"
                            },
                            "example": {
                                "jobAppointmentId": 0,
                                "technicianIds": [
                                    0
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.V2.AppointmentResponse"
                                },
                                "example": {
                                    "id": 0,
                                    "jobId": 0,
                                    "appointmentNumber": "string",
                                    "start": "string",
                                    "end": "string",
                                    "arrivalWindowStart": "string",
                                    "arrivalWindowEnd": "string",
                                    "status": {},
                                    "specialInstructions": "string",
                                    "createdOn": "string",
                                    "modifiedOn": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Some conflict occurred while executing the request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tenant/{tenant}/appointment-assignments/unassign-technicians": {
            "post": {
                "tags": [
                    "AppointmentAssignments"
                ],
                "summary": "Unassigns the list of technicians from the appointment",
                "description": "Unassigns the list of technicians from the appointment",
                "operationId": "AppointmentAssignments_UnassignTechnicians",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Dispatch.V2.UnassignTechniciansRequest"
                            },
                            "example": {
                                "jobAppointmentId": 0,
                                "technicianIds": [
                                    0
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.V2.AppointmentResponse"
                                },
                                "example": {
                                    "id": 0,
                                    "jobId": 0,
                                    "appointmentNumber": "string",
                                    "start": "string",
                                    "end": "string",
                                    "arrivalWindowStart": "string",
                                    "arrivalWindowEnd": "string",
                                    "status": {},
                                    "specialInstructions": "string",
                                    "createdOn": "string",
                                    "modifiedOn": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tenant/{tenant}/arrival-windows": {
            "get": {
                "tags": [
                    "ArrivalWindows"
                ],
                "summary": "ArrivalWindows_GetList",
                "operationId": "ArrivalWindows_GetList",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The logical number of page to return, starting from 1",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": true
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "How many records to return (50 by default)",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": true
                        }
                    },
                    {
                        "name": "includeTotal",
                        "in": "query",
                        "description": "Whether total count should be returned",
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        }
                    },
                    {
                        "name": "createdBefore",
                        "in": "query",
                        "description": "Return items created before certain date/time (in UTC)",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "createdOnOrAfter",
                        "in": "query",
                        "description": "Return items created on or after certain date/time (in UTC)",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "active",
                        "in": "query",
                        "description": "What kind of items should be returned (only active items will be returned by default)\\\nValues: [True, Any, False]",
                        "schema": {
                            "type": "string",
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ActiveRequestArg"
                                }
                            ],
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedResponse_Of_Dispatch.V2.ArrivalWindowResponse"
                                },
                                "example": {
                                    "page": 0,
                                    "pageSize": 0,
                                    "hasMore": true,
                                    "totalCount": 0,
                                    "data": [
                                        {
                                            "id": 0,
                                            "start": "string",
                                            "duration": "string",
                                            "businessUnitIds": [
                                                0
                                            ],
                                            "active": true
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "ArrivalWindows"
                ],
                "summary": "ArrivalWindows_Create",
                "operationId": "ArrivalWindows_Create",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Dispatch.V2.CreateArrivalWindowRequest"
                            },
                            "example": {
                                "start": "string",
                                "duration": "string",
                                "businessUnitIds": [
                                    0
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.V2.ArrivalWindowResponse"
                                },
                                "example": {
                                    "id": 0,
                                    "start": "string",
                                    "duration": "string",
                                    "businessUnitIds": [
                                        0
                                    ],
                                    "active": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tenant/{tenant}/arrival-windows/{id}": {
            "get": {
                "tags": [
                    "ArrivalWindows"
                ],
                "summary": "ArrivalWindows_Get",
                "operationId": "ArrivalWindows_Get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.V2.ArrivalWindowResponse"
                                },
                                "example": {
                                    "id": 0,
                                    "start": "string",
                                    "duration": "string",
                                    "businessUnitIds": [
                                        0
                                    ],
                                    "active": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The requested entity was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "ArrivalWindows"
                ],
                "summary": "ArrivalWindows_Update",
                "operationId": "ArrivalWindows_Update",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Dispatch.V2.UpdateArrivalWindowRequest"
                            },
                            "example": {
                                "start": "string",
                                "duration": "string",
                                "businessUnitIds": [
                                    0
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.V2.ArrivalWindowResponse"
                                },
                                "example": {
                                    "id": 0,
                                    "start": "string",
                                    "duration": "string",
                                    "businessUnitIds": [
                                        0
                                    ],
                                    "active": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tenant/{tenant}/arrival-windows/{id}/activated": {
            "put": {
                "tags": [
                    "ArrivalWindows"
                ],
                "summary": "ArrivalWindows_Activated",
                "operationId": "ArrivalWindows_Activated",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Dispatch.V2.SetArrivalWindowStatusRequest"
                            },
                            "example": {
                                "isActive": true
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has succeeded"
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The requested entity was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tenant/{tenant}/arrival-windows/configuration": {
            "get": {
                "tags": [
                    "ArrivalWindows"
                ],
                "summary": "ArrivalWindows_GetConfiguration",
                "operationId": "ArrivalWindows_GetConfiguration",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.V2.ArrivalWindowConfigurationResponse"
                                },
                                "example": {
                                    "configuration": "StartTimeOfArrivalWindow"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "ArrivalWindows"
                ],
                "summary": "ArrivalWindows_UpdatedConfiguration",
                "operationId": "ArrivalWindows_UpdatedConfiguration",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Dispatch.V2.UpdateArrivalWindowConfigurationRequest"
                            },
                            "example": {
                                "configuration": "StartTimeOfArrivalWindow"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.V2.ArrivalWindowConfigurationResponse"
                                },
                                "example": {
                                    "configuration": "StartTimeOfArrivalWindow"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tenant/{tenant}/business-hours": {
            "get": {
                "tags": [
                    "BusinessHour"
                ],
                "summary": "Gets the business hours.",
                "description": "Gets the business hours.",
                "operationId": "BusinessHour_GetList",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list with the business hours",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.V2.BusinessHourModel"
                                },
                                "example": {
                                    "weekdays": [
                                        {
                                            "fromHour": 0,
                                            "toHour": 0
                                        }
                                    ],
                                    "saturday": [
                                        {
                                            "fromHour": 0,
                                            "toHour": 0
                                        }
                                    ],
                                    "sunday": [
                                        {
                                            "fromHour": 0,
                                            "toHour": 0
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "BusinessHour"
                ],
                "summary": "BusinessHour_Create",
                "operationId": "BusinessHour_Create",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Dispatch.V2.CreateBusinessHourRequest"
                            },
                            "example": {
                                "weekdays": [
                                    {
                                        "fromHour": 0,
                                        "toHour": 0
                                    }
                                ],
                                "saturday": [
                                    {
                                        "fromHour": 0,
                                        "toHour": 0
                                    }
                                ],
                                "sunday": [
                                    {
                                        "fromHour": 0,
                                        "toHour": 0
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.V2.CreateBusinessHourResponse"
                                },
                                "example": {
                                    "weekdays": [
                                        {
                                            "fromHour": 0,
                                            "toHour": 0
                                        }
                                    ],
                                    "saturday": [
                                        {
                                            "fromHour": 0,
                                            "toHour": 0
                                        }
                                    ],
                                    "sunday": [
                                        {
                                            "fromHour": 0,
                                            "toHour": 0
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tenant/{tenant}/capacity": {
            "post": {
                "tags": [
                    "Capacity"
                ],
                "summary": "Capacity_GetList",
                "operationId": "Capacity_GetList",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Dispatch.V2.CapacityRequestArgs"
                            },
                            "example": {
                                "startsOnOrAfter": "string",
                                "endsOnOrBefore": "string",
                                "businessUnitIds": [
                                    0
                                ],
                                "jobTypeId": 0,
                                "skillBasedAvailability": true
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.V2.CapacityResponse"
                                },
                                "example": {
                                    "timeStamp": "string",
                                    "availabilities": [
                                        {
                                            "start": "string",
                                            "end": "string",
                                            "startUtc": "string",
                                            "endUtc": "string",
                                            "businessUnitIds": [
                                                0
                                            ],
                                            "totalAvailability": 0,
                                            "openAvailability": 0,
                                            "technicians": [
                                                {
                                                    "id": 0,
                                                    "name": "string",
                                                    "status": {},
                                                    "hasRequiredSkills": true
                                                }
                                            ],
                                            "isAvailable": true,
                                            "isExceedingIdealBookingPercentage": true
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tenant/{tenant}/export/appointment-assignments": {
            "get": {
                "tags": [
                    "Export"
                ],
                "summary": "Provides export feed for appointment assignments",
                "description": "Provides export feed for appointment assignments",
                "operationId": "Export_AppointmentAssignments",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "active",
                        "in": "query",
                        "description": "What kind of items should be returned (only active items will be returned by default)\\\nValues: [True, Any, False]",
                        "schema": {
                            "type": "string",
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ActiveRequestArg"
                                }
                            ],
                            "nullable": true
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Continuation token received from previous export request in \"continueFrom\" field.\nWhen not specified, the export process starts from the beginning.\\\nUse custom date strings, e.g. \"2020-01-01\" to start the export process from the certain point in time.",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "name": "includeRecentChanges",
                        "in": "query",
                        "description": "Use \"true\" to start receiving the most recent changes quicker.\nNote this may cause the same results appearing multiple times on consecutive requests.",
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExportResponse_Of_Dispatch.V2.ExportAppointmentAssignmentsResponse"
                                },
                                "example": {
                                    "hasMore": true,
                                    "continueFrom": "string",
                                    "data": [
                                        {
                                            "id": 0,
                                            "technicianId": 0,
                                            "technicianName": "string",
                                            "assignedById": 0,
                                            "assignedOn": "string",
                                            "status": {},
                                            "isPaused": true,
                                            "jobId": 0,
                                            "appointmentId": 0,
                                            "createdOn": "string",
                                            "modifiedOn": "string",
                                            "active": true
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tenant/{tenant}/non-job-appointments/{id}": {
            "get": {
                "tags": [
                    "NonJobAppointments"
                ],
                "summary": "NonJobAppointments_Get",
                "operationId": "NonJobAppointments_Get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.V2.GetNonJobAppointmentResponse"
                                },
                                "example": {
                                    "id": 0,
                                    "technicianId": 0,
                                    "start": "string",
                                    "name": "string",
                                    "duration": "string",
                                    "timesheetCodeId": 0,
                                    "summary": "string",
                                    "clearDispatchBoard": true,
                                    "clearTechnicianView": true,
                                    "removeTechnicianFromCapacityPlanning": true,
                                    "allDay": true,
                                    "showOnTechnicianSchedule": true,
                                    "active": true,
                                    "createdOn": "string",
                                    "createdById": 0
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "NonJobAppointments"
                ],
                "summary": "Update an existing non-job appointment",
                "description": "Update an existing non-job appointment",
                "operationId": "NonJobAppointments_Update",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Dispatch.V2.NonJobAppointmentUpdateRequest"
                            },
                            "example": {
                                "technicianId": 0,
                                "start": "string",
                                "duration": "string",
                                "name": "string",
                                "timesheetCodeId": 0,
                                "summary": "string",
                                "clearDispatchBoard": true,
                                "clearTechnicianView": true,
                                "showOnTechnicianSchedule": true,
                                "removeTechnicianFromCapacityPlanning": true,
                                "allDay": true,
                                "repeat": true,
                                "countOccurrences": 0,
                                "interval": 0,
                                "frequency": {},
                                "endType": {},
                                "endOn": "string",
                                "daysOfWeek": "Monday, Wednesday, Friday"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.V2.GetNonJobAppointmentResponse"
                                },
                                "example": {
                                    "id": 0,
                                    "technicianId": 0,
                                    "start": "string",
                                    "name": "string",
                                    "duration": "string",
                                    "timesheetCodeId": 0,
                                    "summary": "string",
                                    "clearDispatchBoard": true,
                                    "clearTechnicianView": true,
                                    "removeTechnicianFromCapacityPlanning": true,
                                    "allDay": true,
                                    "showOnTechnicianSchedule": true,
                                    "active": true,
                                    "createdOn": "string",
                                    "createdById": 0
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Some conflict occurred while executing the request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "NonJobAppointments"
                ],
                "summary": "Delete non-job appointment",
                "description": "Delete non-job appointment",
                "operationId": "NonJobAppointments_Delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.Contracts.NonJobAppointment.DeleteNonJobAppointmentResult"
                                },
                                "example": {
                                    "message": "string",
                                    "id": 0
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The requested entity was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tenant/{tenant}/non-job-appointments": {
            "get": {
                "tags": [
                    "NonJobAppointments"
                ],
                "summary": "Gets a list of non-job appointments",
                "description": "Gets a list of non-job appointments",
                "operationId": "NonJobAppointments_GetList",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "technicianId",
                        "in": "query",
                        "description": "Unique id of the technician this non-job appointment applies to",
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "nullable": true
                        }
                    },
                    {
                        "name": "startsOnOrAfter",
                        "in": "query",
                        "description": "When the Start of non-job appointment should be at or after",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "startsOnOrBefore",
                        "in": "query",
                        "description": "When the Start of non-job appointment should be at or before",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "timesheetCodeId",
                        "in": "query",
                        "description": "Unique Id of timesheet code must apply to",
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "nullable": true
                        }
                    },
                    {
                        "name": "activeOnly",
                        "in": "query",
                        "description": "Whether the result should contains only active non-job appointments",
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        }
                    },
                    {
                        "name": "showOnTechnicianSchedule",
                        "in": "query",
                        "description": "Whether the non-job appointment shows on the technicians schedule even if there is no timesheet",
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        }
                    },
                    {
                        "name": "createdOnOrAfter",
                        "in": "query",
                        "description": "Return items created on or after certain date/time (in UTC)",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "createdBefore",
                        "in": "query",
                        "description": "Return items created before certain date/time (in UTC)",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "modifiedOnOrAfter",
                        "in": "query",
                        "description": "Return items modified on or after certain date/time (in UTC)",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "modifiedBefore",
                        "in": "query",
                        "description": "Return items modified before certain date/time (in UTC)",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "Perform lookup by multiple IDs (maximum 50)",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The logical number of page to return, starting from 1",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": true
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "How many records to return (50 by default)",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": true
                        }
                    },
                    {
                        "name": "includeTotal",
                        "in": "query",
                        "description": "Whether total count should be returned",
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Applies sorting by the specified field:\\\n\"?sort=+FieldName\" for ascending order,\\\n\"?sort=-FieldName\" for descending order.\\\n\\\nAvailable fields are: Id, CreatedOn, ModifiedOn.",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedResponse_Of_Dispatch.V2.NonJobAppointmentResponse"
                                },
                                "example": {
                                    "page": 0,
                                    "pageSize": 0,
                                    "hasMore": true,
                                    "totalCount": 0,
                                    "data": [
                                        {
                                            "id": 0,
                                            "technicianId": 0,
                                            "start": "string",
                                            "name": "string",
                                            "duration": "string",
                                            "timesheetCodeId": 0,
                                            "summary": "string",
                                            "clearDispatchBoard": true,
                                            "clearTechnicianView": true,
                                            "removeTechnicianFromCapacityPlanning": true,
                                            "allDay": true,
                                            "showOnTechnicianSchedule": true,
                                            "active": true,
                                            "createdOn": "string",
                                            "modifiedOn": "string",
                                            "createdById": 0
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "NonJobAppointments"
                ],
                "summary": "Create a new non-job appointment",
                "description": "Create a new non-job appointment",
                "operationId": "NonJobAppointments_Create",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Dispatch.V2.CreateNonJobAppointmentRequest"
                            },
                            "example": {
                                "technicianId": 0,
                                "start": "string",
                                "duration": "string",
                                "name": "string",
                                "timesheetCodeId": 0,
                                "summary": "string",
                                "clearDispatchBoard": true,
                                "clearTechnicianView": true,
                                "showOnTechnicianSchedule": true,
                                "removeTechnicianFromCapacityPlanning": true,
                                "allDay": true,
                                "repeat": true,
                                "countOccurrences": 0,
                                "interval": 0,
                                "frequency": {},
                                "endType": {},
                                "endOn": "string",
                                "daysOfWeek": "Monday, Wednesday, Friday"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.Contracts.NonJobAppointment.CreateNonJobAppointmentResult"
                                },
                                "example": {
                                    "id": 0,
                                    "technicianId": 0,
                                    "start": "string",
                                    "name": "string",
                                    "duration": "string",
                                    "timesheetCodeId": 0,
                                    "summary": "string",
                                    "clearDispatchBoard": true,
                                    "clearTechnicianView": true,
                                    "removeTechnicianFromCapacityPlanning": true,
                                    "allDay": true,
                                    "showOnTechnicianSchedule": true,
                                    "active": true,
                                    "createdOn": "string",
                                    "createdById": 0,
                                    "repeat": true,
                                    "countOccurrences": 0,
                                    "interval": 0,
                                    "frequency": {},
                                    "endType": {},
                                    "endOn": "string",
                                    "daysOfWeek": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tenant/{tenant}/teams": {
            "get": {
                "tags": [
                    "Team"
                ],
                "summary": "Gets a list of teams",
                "description": "Gets a list of teams",
                "operationId": "Team_GetList",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The logical number of page to return, starting from 1",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": true
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "How many records to return (50 by default)",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": true
                        }
                    },
                    {
                        "name": "includeTotal",
                        "in": "query",
                        "description": "Whether total count should be returned",
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        }
                    },
                    {
                        "name": "includeInactive",
                        "in": "query",
                        "description": "Whether to include inactive teams",
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        }
                    },
                    {
                        "name": "createdOnOrAfter",
                        "in": "query",
                        "description": "Return items created on or after certain date/time (in UTC)",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "createdBefore",
                        "in": "query",
                        "description": "Return items created before certain date/time (in UTC)",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "modifiedOnOrAfter",
                        "in": "query",
                        "description": "Return items modified on or after certain date/time (in UTC)",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "modifiedBefore",
                        "in": "query",
                        "description": "Return items modified before certain date/time (in UTC)",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Applies sorting by the specified field:\\\n\"?sort=+FieldName\" for ascending order,\\\n\"?sort=-FieldName\" for descending order.\\\n\\\nAvailable fields are: Id, CreatedOn, ModifiedOn.",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedResponse_Of_Dispatch.V2.TeamResponse"
                                },
                                "example": {
                                    "page": 0,
                                    "pageSize": 0,
                                    "hasMore": true,
                                    "totalCount": 0,
                                    "data": [
                                        {
                                            "id": 0,
                                            "active": true,
                                            "name": "string",
                                            "createdBy": 0,
                                            "createdOn": "string",
                                            "modifiedOn": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Team"
                ],
                "summary": "Creates new team",
                "description": "Creates new team",
                "operationId": "Team_Create",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Dispatch.V2.CreateTeamRequest"
                            },
                            "example": {
                                "active": true,
                                "name": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.V2.CreateTeamResponse"
                                },
                                "example": {
                                    "id": 0,
                                    "active": true,
                                    "name": "string",
                                    "createdBy": 0,
                                    "createdOn": "string",
                                    "modifiedOn": "string",
                                    "created": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tenant/{tenant}/teams/{id}": {
            "get": {
                "tags": [
                    "Team"
                ],
                "summary": "Gets a specific team",
                "description": "Gets a specific team",
                "operationId": "Team_Get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.V2.TeamResponse"
                                },
                                "example": {
                                    "id": 0,
                                    "active": true,
                                    "name": "string",
                                    "createdBy": 0,
                                    "createdOn": "string",
                                    "modifiedOn": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The requested entity was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Team"
                ],
                "summary": "Delete team",
                "description": "Delete team",
                "operationId": "Team_Delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has succeeded"
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The requested entity was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tenant/{tenant}/technician-shifts": {
            "get": {
                "tags": [
                    "TechnicianShifts"
                ],
                "summary": "Gets a list of technician shifts",
                "description": "Gets a list of technician shifts",
                "operationId": "TechnicianShifts_GetList",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "startsOnOrAfter",
                        "in": "query",
                        "description": "When the Start of shift should be at or after",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "endsOnOrBefore",
                        "in": "query",
                        "description": "When the End of shift should be at or before",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "shiftType",
                        "in": "query",
                        "description": "Value to match ShiftType to\\\nValues: [Normal, OnCall, TimeOff]",
                        "schema": {
                            "type": "string",
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/Dispatch.V2.ShiftType"
                                }
                            ],
                            "nullable": true
                        }
                    },
                    {
                        "name": "technicianId",
                        "in": "query",
                        "description": "Unique Id of technician shift must apply to",
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "nullable": true
                        }
                    },
                    {
                        "name": "titleContains",
                        "in": "query",
                        "description": "Text that must appear in the Title",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "name": "noteContains",
                        "in": "query",
                        "description": "Text that must appear in the Note",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The logical number of page to return, starting from 1",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": true
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "How many records to return (50 by default)",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": true
                        }
                    },
                    {
                        "name": "includeTotal",
                        "in": "query",
                        "description": "Whether total count should be returned",
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        }
                    },
                    {
                        "name": "active",
                        "in": "query",
                        "description": "What kind of items should be returned (only active items will be returned by default)\\\nValues: [True, Any, False]",
                        "schema": {
                            "type": "string",
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ActiveRequestArg"
                                }
                            ],
                            "nullable": true
                        }
                    },
                    {
                        "name": "createdBefore",
                        "in": "query",
                        "description": "Return items created before certain date/time (in UTC)",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "createdOnOrAfter",
                        "in": "query",
                        "description": "Return items created on or after certain date/time (in UTC)",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "modifiedBefore",
                        "in": "query",
                        "description": "Return items modified before certain date/time (in UTC)",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "modifiedOnOrAfter",
                        "in": "query",
                        "description": "Return items modified on or after certain date/time (in UTC)",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Applies sorting by the specified field:\\\n\"?sort=+FieldName\" for ascending order,\\\n\"?sort=-FieldName\" for descending order.\\\n\\\nAvailable fields are: Id, CreatedOn, ModifiedOn.",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedResponse_Of_Dispatch.V2.TechnicianShiftResponse"
                                },
                                "example": {
                                    "page": 0,
                                    "pageSize": 0,
                                    "hasMore": true,
                                    "totalCount": 0,
                                    "data": [
                                        {
                                            "id": 0,
                                            "shiftType": {},
                                            "title": "string",
                                            "note": "string",
                                            "active": true,
                                            "technicianId": 0,
                                            "start": "string",
                                            "end": "string",
                                            "timesheetCodeId": 0,
                                            "createdOn": "string",
                                            "modifiedOn": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "TechnicianShifts"
                ],
                "summary": "Creates new Technician Shift",
                "description": "Creates new Technician Shift",
                "operationId": "TechnicianShifts_Create",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Dispatch.V2.CreateTechnicianShiftRequest"
                            },
                            "example": {
                                "technicianIds": [
                                    0
                                ],
                                "shiftType": "Normal",
                                "title": "string",
                                "start": "string",
                                "end": "string",
                                "note": "string",
                                "timesheetCodeId": 0,
                                "repeatType": "Weekly",
                                "repeatEndDate": "string",
                                "repeatInterval": 0,
                                "shiftDays": "Monday, Wednesday, Friday"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.V2.TechnicianShiftCreateResponse"
                                },
                                "example": {
                                    "created": true,
                                    "technicianShifts": [
                                        {
                                            "id": 0,
                                            "shiftType": {},
                                            "title": "string",
                                            "note": "string",
                                            "active": true,
                                            "technicianId": 0,
                                            "start": "string",
                                            "end": "string",
                                            "timesheetCodeId": 0,
                                            "createdOn": "string",
                                            "modifiedOn": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tenant/{tenant}/technician-shifts/{id}": {
            "get": {
                "tags": [
                    "TechnicianShifts"
                ],
                "summary": "Gets a specific technician shift",
                "description": "Gets a specific technician shift",
                "operationId": "TechnicianShifts_Get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.V2.TechnicianShiftResponse"
                                },
                                "example": {
                                    "id": 0,
                                    "shiftType": {},
                                    "title": "string",
                                    "note": "string",
                                    "active": true,
                                    "technicianId": 0,
                                    "start": "string",
                                    "end": "string",
                                    "timesheetCodeId": 0,
                                    "createdOn": "string",
                                    "modifiedOn": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The requested entity was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "TechnicianShifts"
                ],
                "summary": "Updates Technician Shift",
                "description": "Updates Technician Shift",
                "operationId": "TechnicianShifts_Update",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Dispatch.V2.UpdateTechnicianShiftRequest"
                            },
                            "example": {
                                "shiftType": "Normal",
                                "title": "string",
                                "start": "string",
                                "end": "string",
                                "note": "string",
                                "timesheetCodeId": 0
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.V2.TechnicianShiftUpdateResponse"
                                },
                                "example": {
                                    "technicianShifts": [
                                        {
                                            "id": 0,
                                            "shiftType": {},
                                            "title": "string",
                                            "note": "string",
                                            "active": true,
                                            "technicianId": 0,
                                            "start": "string",
                                            "end": "string",
                                            "timesheetCodeId": 0,
                                            "createdOn": "string",
                                            "modifiedOn": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The requested entity was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "TechnicianShifts"
                ],
                "summary": "Deletes the specified technician shift",
                "description": "Deletes the specified technician shift",
                "operationId": "TechnicianShifts_Delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The technician shift Id to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.Contracts.TechnicianShift.DeleteTechnicianShiftResult"
                                },
                                "example": {
                                    "message": "string",
                                    "id": 0
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The requested entity was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tenant/{tenant}/technician-shifts/bulk-delete": {
            "post": {
                "tags": [
                    "TechnicianShifts"
                ],
                "summary": "Deletes the technician shifts specified by the criteria",
                "description": "Deletes the technician shifts specified by the criteria",
                "operationId": "TechnicianShifts_BulkDelete",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The criteria to delete",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Dispatch.V2.BulkDeleteTechnicianShiftRequest"
                            },
                            "example": {
                                "start": "string",
                                "end": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A list with the deleted technician shift Ids",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.Contracts.TechnicianShift.BulkDeleteTechnicianShiftResult"
                                },
                                "example": {
                                    "message": "string",
                                    "deletedIds": [
                                        0
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tenant/{tenant}/technician-tracking": {
            "get": {
                "tags": [
                    "TechnicianTracking"
                ],
                "summary": "TechnicianTracking_Get",
                "operationId": "TechnicianTracking_Get",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "technicianId",
                        "in": "query",
                        "description": "Unique Id of technician that tracking url must apply to",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "appointmentId",
                        "in": "query",
                        "description": "Unique Id of appointment that tracking url must apply to",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.V2.TechnicianTrackingResponse"
                                },
                                "example": {
                                    "technicianTrackingUrl": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                },
                                "example": "string"
                            }
                        }
                    }
                }
            }
        },
        "/tenant/{tenant}/zones": {
            "get": {
                "tags": [
                    "Zone"
                ],
                "summary": "Gets a list of zones",
                "description": "Gets a list of zones",
                "operationId": "Zone_GetList",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The logical number of page to return, starting from 1",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": true
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "How many records to return (50 by default)",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": true
                        }
                    },
                    {
                        "name": "includeTotal",
                        "in": "query",
                        "description": "Whether total count should be returned",
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        }
                    },
                    {
                        "name": "createdOnOrAfter",
                        "in": "query",
                        "description": "Return items created on or after certain date/time (in UTC)",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "createdBefore",
                        "in": "query",
                        "description": "Return items created before certain date/time (in UTC)",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "modifiedOnOrAfter",
                        "in": "query",
                        "description": "Return items modified on or after certain date/time (in UTC)",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "modifiedBefore",
                        "in": "query",
                        "description": "Return items modified before certain date/time (in UTC)",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                        }
                    },
                    {
                        "name": "active",
                        "in": "query",
                        "description": "What kind of items should be returned (only active items will be returned by default)\\\nValues: [True, Any, False]",
                        "schema": {
                            "type": "string",
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ActiveRequestArg"
                                }
                            ],
                            "nullable": true
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Applies sorting by the specified field:\\\n\"?sort=+FieldName\" for ascending order,\\\n\"?sort=-FieldName\" for descending order.\\\n\\\nAvailable fields are: Id, CreatedOn, ModifiedOn.",
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedResponse_Of_Dispatch.V2.ZoneResponse"
                                },
                                "example": {
                                    "page": 0,
                                    "pageSize": 0,
                                    "hasMore": true,
                                    "totalCount": 0,
                                    "data": [
                                        {
                                            "id": 0,
                                            "active": true,
                                            "name": "string",
                                            "zips": [
                                                "string"
                                            ],
                                            "cities": [
                                                "string"
                                            ],
                                            "territoryNumbers": [
                                                "string"
                                            ],
                                            "locnNumbers": [
                                                "string"
                                            ],
                                            "createdBy": 0,
                                            "createdOn": "string",
                                            "modifiedOn": "string",
                                            "serviceDaysEnabled": true,
                                            "serviceDays": [
                                                "string"
                                            ],
                                            "businessUnits": [
                                                0
                                            ],
                                            "technicians": [
                                                0
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Zone"
                ],
                "summary": "Creates a new zone",
                "description": "Creates a new zone",
                "operationId": "Zone_CreateZone",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Dispatch.V2.CreateOrUpdateZoneRequestArgs"
                            },
                            "example": {
                                "name": "string",
                                "zips": [
                                    "string"
                                ],
                                "cities": [
                                    "string"
                                ],
                                "territoryNumbers": [
                                    "string"
                                ],
                                "locnNumbers": [
                                    "string"
                                ],
                                "serviceDaysEnabled": true,
                                "serviceDaysIds": [
                                    0
                                ],
                                "businessUnits": [
                                    0
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.V2.CreateOrUpdateZoneResponse"
                                },
                                "example": {
                                    "id": 0,
                                    "active": true,
                                    "name": "string",
                                    "zips": [
                                        "string"
                                    ],
                                    "cities": [
                                        "string"
                                    ],
                                    "territoryNumbers": [
                                        "string"
                                    ],
                                    "locnNumbers": [
                                        "string"
                                    ],
                                    "serviceDaysEnabled": true,
                                    "serviceDaysIds": [
                                        0
                                    ],
                                    "businessUnits": [
                                        0
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                },
                                "example": "string"
                            }
                        }
                    }
                }
            }
        },
        "/tenant/{tenant}/zones/{id}": {
            "get": {
                "tags": [
                    "Zone"
                ],
                "summary": "Gets a specific zone",
                "description": "Gets a specific zone",
                "operationId": "Zone_Get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.V2.ZoneResponse"
                                },
                                "example": {
                                    "id": 0,
                                    "active": true,
                                    "name": "string",
                                    "zips": [
                                        "string"
                                    ],
                                    "cities": [
                                        "string"
                                    ],
                                    "territoryNumbers": [
                                        "string"
                                    ],
                                    "locnNumbers": [
                                        "string"
                                    ],
                                    "createdBy": 0,
                                    "createdOn": "string",
                                    "modifiedOn": "string",
                                    "serviceDaysEnabled": true,
                                    "serviceDays": [
                                        "string"
                                    ],
                                    "businessUnits": [
                                        0
                                    ],
                                    "technicians": [
                                        0
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The requested entity was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tenant/{tenant}/zones/{zoneId}": {
            "patch": {
                "tags": [
                    "Zone"
                ],
                "summary": "Updates an existing zone",
                "description": "Updates an existing zone",
                "operationId": "Zone_UpdateZone",
                "parameters": [
                    {
                        "name": "zoneId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Dispatch.V2.CreateOrUpdateZoneRequestArgs"
                            },
                            "example": {
                                "name": "string",
                                "zips": [
                                    "string"
                                ],
                                "cities": [
                                    "string"
                                ],
                                "territoryNumbers": [
                                    "string"
                                ],
                                "locnNumbers": [
                                    "string"
                                ],
                                "serviceDaysEnabled": true,
                                "serviceDaysIds": [
                                    0
                                ],
                                "businessUnits": [
                                    0
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dispatch.V2.CreateOrUpdateZoneResponse"
                                },
                                "example": {
                                    "id": 0,
                                    "active": true,
                                    "name": "string",
                                    "zips": [
                                        "string"
                                    ],
                                    "cities": [
                                        "string"
                                    ],
                                    "territoryNumbers": [
                                        "string"
                                    ],
                                    "locnNumbers": [
                                        "string"
                                    ],
                                    "serviceDaysEnabled": true,
                                    "serviceDaysIds": [
                                        0
                                    ],
                                    "businessUnits": [
                                        0
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                },
                                "example": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Zone"
                ],
                "summary": "Deletes a zone",
                "description": "Deletes a zone",
                "operationId": "Zone_DeleteZone",
                "parameters": [
                    {
                        "name": "zoneId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tenant",
                        "in": "path",
                        "description": "Tenant ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has succeeded"
                    },
                    "400": {
                        "description": "The request cannot be processed, check validation errors or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                },
                                "example": {
                                    "type": "string",
                                    "title": "string",
                                    "status": 0,
                                    "traceId": "string",
                                    "errors": {},
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Dispatch.V2.GpsPingResponse": {
                "required": [
                    "externalId",
                    "status",
                    "message"
                ],
                "type": "object",
                "properties": {
                    "externalId": {
                        "type": "string",
                        "description": "Unique External ID for data point"
                    },
                    "status": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Dispatch.V2.GpsPingResultStatus"
                            }
                        ],
                        "description": "Request status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Gets or sets the response message received from the GPS provider about the unit at the time of recording",
                        "format": "html"
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.GpsPingResultStatus": {
                "enum": [
                    "Fail",
                    "Success"
                ],
                "type": "string",
                "description": "",
                "x-enumNames": [
                    "Fail",
                    "Success"
                ]
            },
            "ApiErrorResponse": {
                "required": [
                    "type",
                    "title",
                    "status",
                    "traceId",
                    "errors",
                    "data"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "A URI reference that identifies the problem type"
                    },
                    "title": {
                        "type": "string",
                        "description": "A short, human-readable summary of the problem type"
                    },
                    "status": {
                        "type": "integer",
                        "description": "The HTTP status code generated by server",
                        "format": "int32"
                    },
                    "traceId": {
                        "type": "string",
                        "description": "Internal trace ID for advanced diagnostics"
                    },
                    "errors": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Provides more details about errors occurred, which can potentially be used for visual display"
                    },
                    "data": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "Provides additional data, intended for programmatical usage"
                    }
                },
                "additionalProperties": false,
                "description": "Detailed error response, following RFC 7807 recommendations (https://tools.ietf.org/html/rfc7807)."
            },
            "Dispatch.V2.GpsPingCreateRequest": {
                "required": [
                    "unitId",
                    "unitName",
                    "eventTime",
                    "street",
                    "city",
                    "region",
                    "postalCode",
                    "message",
                    "externalId",
                    "isNew",
                    "statusMessage"
                ],
                "type": "object",
                "properties": {
                    "unitId": {
                        "type": "string",
                        "description": "Gets or sets the ID of the object for which location information is provided"
                    },
                    "unitName": {
                        "type": "string",
                        "description": "Gets or sets the name of the object for which location information is provided"
                    },
                    "eventTime": {
                        "type": "string",
                        "description": "Gets or sets the time of the recording",
                        "format": "date-time"
                    },
                    "latitude": {
                        "type": "number",
                        "description": "Gets or sets the latitude coordinate of the unit's location at the time of recording",
                        "format": "double",
                        "nullable": true
                    },
                    "longitude": {
                        "type": "number",
                        "description": "Gets or sets the longitude coordinate of the unit's location at the time of recording",
                        "format": "double",
                        "nullable": true
                    },
                    "speed": {
                        "type": "number",
                        "description": "Gets or sets the speed of the vehicle at the time of recording",
                        "format": "double",
                        "nullable": true
                    },
                    "street": {
                        "type": "string",
                        "description": "Gets the location's street address"
                    },
                    "city": {
                        "type": "string",
                        "description": "Gets the location's city"
                    },
                    "region": {
                        "type": "string",
                        "description": "Gets the location's region"
                    },
                    "postalCode": {
                        "type": "string",
                        "description": "Gets the location's postal code"
                    },
                    "message": {
                        "type": "string",
                        "description": "Gets or sets the response message received from the GPS provider about the unit at the time of recording",
                        "format": "html"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Unique External ID for data point"
                    },
                    "isNew": {
                        "type": "boolean",
                        "description": "Indicate if gps ping unit is a new one"
                    },
                    "statusMessage": {
                        "type": "string",
                        "description": "Gets the status message"
                    }
                },
                "additionalProperties": false
            },
            "PaginatedResponse_Of_Dispatch.V2.AppointmentAssignmentResponse": {
                "required": [
                    "page",
                    "pageSize",
                    "hasMore",
                    "data"
                ],
                "type": "object",
                "properties": {
                    "page": {
                        "type": "integer",
                        "description": "From which page this output has started",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "Page size for this query (i.e. how many records were requested to return)",
                        "format": "int32"
                    },
                    "hasMore": {
                        "type": "boolean",
                        "description": "True if there are more records in the query than returned in this result"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total count of records for this query (can optionally be populated)",
                        "format": "int32",
                        "nullable": true
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Dispatch.V2.AppointmentAssignmentResponse"
                        },
                        "description": "The collection of result items, will never have more than PageSize items"
                    }
                },
                "additionalProperties": false,
                "description": "Represents paginated API response."
            },
            "Dispatch.V2.AppointmentAssignmentResponse": {
                "required": [
                    "id",
                    "technicianId",
                    "technicianName",
                    "assignedById",
                    "assignedOn",
                    "status",
                    "isPaused",
                    "jobId",
                    "appointmentId",
                    "createdOn",
                    "modifiedOn",
                    "active"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the appointment assignment",
                        "format": "int64"
                    },
                    "technicianId": {
                        "type": "integer",
                        "description": "ID of the technician",
                        "format": "int64"
                    },
                    "technicianName": {
                        "type": "string",
                        "description": "Name of the technician"
                    },
                    "assignedById": {
                        "type": "integer",
                        "description": "ID of the user who assigned the appointment assignment",
                        "format": "int64"
                    },
                    "assignedOn": {
                        "type": "string",
                        "description": "Date/time (in UTC) when the appointment assignment was assigned",
                        "format": "date-time"
                    },
                    "status": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Dispatch.V2.JobAppointmentAssignmentStatus"
                            }
                        ],
                        "description": "Status of the appointment assignment"
                    },
                    "isPaused": {
                        "type": "boolean",
                        "description": "Whether appointment assignment is paused"
                    },
                    "jobId": {
                        "type": "integer",
                        "description": "ID of the job",
                        "format": "int64"
                    },
                    "appointmentId": {
                        "type": "integer",
                        "description": "ID of the appointment",
                        "format": "int64"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "When the assignment was created (in UTC)",
                        "format": "date-time"
                    },
                    "modifiedOn": {
                        "type": "string",
                        "description": "When the assignment was modified (in UTC)",
                        "format": "date-time"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Indicate if assignment is active"
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.JobAppointmentAssignmentStatus": {
                "enum": [
                    "Scheduled",
                    "Dispatched",
                    "Working",
                    "Done"
                ],
                "type": "string",
                "description": "",
                "x-enumNames": [
                    "Scheduled",
                    "Dispatched",
                    "Working",
                    "Done"
                ]
            },
            "ActiveRequestArg": {
                "enum": [
                    "True",
                    "Any",
                    "False"
                ],
                "type": "string",
                "description": "Represents possible HTTP query argument values, when applying filters based on active status.",
                "x-enumNames": [
                    "True",
                    "Any",
                    "False"
                ]
            },
            "Dispatch.V2.AppointmentResponse": {
                "required": [
                    "id",
                    "jobId",
                    "start",
                    "end",
                    "status",
                    "createdOn",
                    "modifiedOn"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Appointment ID",
                        "format": "int64"
                    },
                    "jobId": {
                        "type": "integer",
                        "description": "ID of the job that the appointment was created for",
                        "format": "int64"
                    },
                    "appointmentNumber": {
                        "type": "string",
                        "description": "Appointment number",
                        "nullable": true
                    },
                    "start": {
                        "type": "string",
                        "description": "Appointment's start date/time (in UTC)",
                        "format": "date-time"
                    },
                    "end": {
                        "type": "string",
                        "description": "Appointment's end date/time (in UTC)",
                        "format": "date-time"
                    },
                    "arrivalWindowStart": {
                        "type": "string",
                        "description": "Arrival window start date/time (in UTC), if configured",
                        "format": "date-time",
                        "nullable": true
                    },
                    "arrivalWindowEnd": {
                        "type": "string",
                        "description": "Arrival window end date/time (in UTC), if configured",
                        "format": "date-time",
                        "nullable": true
                    },
                    "status": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Dispatch.V2.AppointmentStatus"
                            }
                        ],
                        "description": "Appointment's status"
                    },
                    "specialInstructions": {
                        "type": "string",
                        "description": "Special instructions associated to the appointment",
                        "nullable": true
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "When the appointment was created (in UTC)",
                        "format": "date-time"
                    },
                    "modifiedOn": {
                        "type": "string",
                        "description": "When the appointment was modified (in UTC)",
                        "format": "date-time"
                    }
                },
                "additionalProperties": false,
                "description": "Appointment response model"
            },
            "Dispatch.V2.AppointmentStatus": {
                "enum": [
                    "Scheduled",
                    "Dispatched",
                    "Working",
                    "Hold",
                    "Done",
                    "Canceled"
                ],
                "type": "string",
                "description": "",
                "x-enumNames": [
                    "Scheduled",
                    "Dispatched",
                    "Working",
                    "Hold",
                    "Done",
                    "Canceled"
                ]
            },
            "Dispatch.V2.AssignTechniciansRequest": {
                "required": [
                    "jobAppointmentId",
                    "technicianIds"
                ],
                "type": "object",
                "properties": {
                    "jobAppointmentId": {
                        "type": "integer",
                        "description": "Id of the appointment to assign to.",
                        "format": "int64"
                    },
                    "technicianIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "Assign these technicians to the appointment."
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.UnassignTechniciansRequest": {
                "required": [
                    "jobAppointmentId",
                    "technicianIds"
                ],
                "type": "object",
                "properties": {
                    "jobAppointmentId": {
                        "type": "integer",
                        "description": "Id of the appointment to unassign from.",
                        "format": "int64"
                    },
                    "technicianIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "Unassign these technicians from the appointment."
                    }
                },
                "additionalProperties": false
            },
            "PaginatedResponse_Of_Dispatch.V2.ArrivalWindowResponse": {
                "required": [
                    "page",
                    "pageSize",
                    "hasMore",
                    "data"
                ],
                "type": "object",
                "properties": {
                    "page": {
                        "type": "integer",
                        "description": "From which page this output has started",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "Page size for this query (i.e. how many records were requested to return)",
                        "format": "int32"
                    },
                    "hasMore": {
                        "type": "boolean",
                        "description": "True if there are more records in the query than returned in this result"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total count of records for this query (can optionally be populated)",
                        "format": "int32",
                        "nullable": true
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Dispatch.V2.ArrivalWindowResponse"
                        },
                        "description": "The collection of result items, will never have more than PageSize items"
                    }
                },
                "additionalProperties": false,
                "description": "Represents paginated API response."
            },
            "Dispatch.V2.ArrivalWindowResponse": {
                "required": [
                    "id",
                    "start",
                    "duration",
                    "businessUnitIds",
                    "active"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "start": {
                        "type": "string",
                        "format": "duration"
                    },
                    "duration": {
                        "type": "string",
                        "format": "duration"
                    },
                    "businessUnitIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "active": {
                        "type": "boolean"
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.CreateArrivalWindowRequest": {
                "required": [
                    "start",
                    "duration",
                    "businessUnitIds"
                ],
                "type": "object",
                "properties": {
                    "start": {
                        "type": "string",
                        "description": "The start time for the arrival window defined as TimeSpan. I.e. \"09:00\"",
                        "format": "duration"
                    },
                    "duration": {
                        "type": "string",
                        "description": "The end time for the arrival window defined as TimeSpan. I.e. \"11:00\"",
                        "format": "duration"
                    },
                    "businessUnitIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "The business unit ids list that this arrival window applies for."
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.UpdateArrivalWindowRequest": {
                "required": [
                    "start",
                    "duration",
                    "businessUnitIds"
                ],
                "type": "object",
                "properties": {
                    "start": {
                        "type": "string",
                        "description": "The start time for the arrival window defined as TimeSpan. I.e. \"09:00\"",
                        "format": "duration"
                    },
                    "duration": {
                        "type": "string",
                        "description": "The end time for the arrival window defined as TimeSpan. I.e. \"11:00\"",
                        "format": "duration"
                    },
                    "businessUnitIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "The business unit ids list that this arrival window applies for."
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.SetArrivalWindowStatusRequest": {
                "required": [
                    "isActive"
                ],
                "type": "object",
                "properties": {
                    "isActive": {
                        "type": "boolean"
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.ArrivalWindowConfigurationResponse": {
                "required": [
                    "configuration"
                ],
                "type": "object",
                "properties": {
                    "configuration": {
                        "$ref": "#/components/schemas/Dispatch.V2.ArrivalWindowConfiguration"
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.ArrivalWindowConfiguration": {
                "enum": [
                    "StartTimeOfArrivalWindow",
                    "EndTimeOfArrivalWindow"
                ],
                "type": "string",
                "description": "Determines the default Job's start time during booking or rescheduling after an Arrival window has been selected or changed by a user.",
                "x-enumNames": [
                    "StartTimeOfArrivalWindow",
                    "EndTimeOfArrivalWindow"
                ]
            },
            "Dispatch.V2.UpdateArrivalWindowConfigurationRequest": {
                "required": [
                    "configuration"
                ],
                "type": "object",
                "properties": {
                    "configuration": {
                        "$ref": "#/components/schemas/Dispatch.V2.ArrivalWindowConfiguration"
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.BusinessHourModel": {
                "required": [
                    "weekdays",
                    "saturday",
                    "sunday"
                ],
                "type": "object",
                "properties": {
                    "weekdays": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Dispatch.V2.TimeRange"
                        }
                    },
                    "saturday": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Dispatch.V2.TimeRange"
                        }
                    },
                    "sunday": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Dispatch.V2.TimeRange"
                        }
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.TimeRange": {
                "required": [
                    "fromHour",
                    "toHour"
                ],
                "type": "object",
                "properties": {
                    "fromHour": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "toHour": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.CreateBusinessHourResponse": {
                "required": [
                    "weekdays",
                    "saturday",
                    "sunday"
                ],
                "type": "object",
                "properties": {
                    "weekdays": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Dispatch.V2.TimeRange"
                        }
                    },
                    "saturday": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Dispatch.V2.TimeRange"
                        }
                    },
                    "sunday": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Dispatch.V2.TimeRange"
                        }
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.CreateBusinessHourRequest": {
                "required": [
                    "weekdays",
                    "saturday",
                    "sunday"
                ],
                "type": "object",
                "properties": {
                    "weekdays": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Dispatch.V2.TimeRange"
                        }
                    },
                    "saturday": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Dispatch.V2.TimeRange"
                        }
                    },
                    "sunday": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Dispatch.V2.TimeRange"
                        }
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.CapacityResponse": {
                "required": [
                    "timeStamp",
                    "availabilities"
                ],
                "type": "object",
                "properties": {
                    "timeStamp": {
                        "type": "string",
                        "description": "When the request was processed",
                        "format": "date-time"
                    },
                    "availabilities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Dispatch.V2.CapacityResponseAvailability"
                        },
                        "description": "Availability calculations by time frame"
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.CapacityResponseAvailability": {
                "required": [
                    "start",
                    "end",
                    "startUtc",
                    "endUtc",
                    "businessUnitIds",
                    "totalAvailability",
                    "openAvailability",
                    "technicians",
                    "isAvailable",
                    "isExceedingIdealBookingPercentage"
                ],
                "type": "object",
                "properties": {
                    "start": {
                        "type": "string",
                        "description": "When the availability time frame starts",
                        "format": "date-time"
                    },
                    "end": {
                        "type": "string",
                        "description": "When the availability time frame ends",
                        "format": "date-time"
                    },
                    "startUtc": {
                        "type": "string",
                        "description": "When the availability time frame starts",
                        "format": "date-time"
                    },
                    "endUtc": {
                        "type": "string",
                        "description": "When the availability time frame ends",
                        "format": "date-time"
                    },
                    "businessUnitIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "Business units that the availability applies to"
                    },
                    "totalAvailability": {
                        "type": "number",
                        "description": "Number of hours that total capacity can allow to be booked during this time frame",
                        "format": "double"
                    },
                    "openAvailability": {
                        "type": "number",
                        "description": "Number of remaining hours that can be booked during this time frame",
                        "format": "double"
                    },
                    "technicians": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Dispatch.V2.CapacityResponseTechnician"
                        },
                        "description": "Technician details for this availability time frame"
                    },
                    "isAvailable": {
                        "type": "boolean",
                        "description": "Indicate if time slot is available"
                    },
                    "isExceedingIdealBookingPercentage": {
                        "type": "boolean",
                        "description": "Indicate if Ideal Booking Percentage is exceeded"
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.CapacityResponseTechnician": {
                "required": [
                    "id",
                    "name",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Unique Id of technician",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of technician"
                    },
                    "status": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Dispatch.V2.CapacityResponseTechnicianStatus"
                            }
                        ],
                        "description": "Whether the technician is available to work during the associated time frame"
                    },
                    "hasRequiredSkills": {
                        "type": "boolean",
                        "description": "Whether the technician has all the skills required for the job type",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.CapacityResponseTechnicianStatus": {
                "enum": [
                    "Available",
                    "Unavailable"
                ],
                "type": "string",
                "description": "",
                "x-enumNames": [
                    "Available",
                    "Unavailable"
                ]
            },
            "Dispatch.V2.CapacityRequestArgs": {
                "required": [
                    "startsOnOrAfter",
                    "endsOnOrBefore",
                    "skillBasedAvailability"
                ],
                "type": "object",
                "properties": {
                    "startsOnOrAfter": {
                        "type": "string",
                        "description": "When the time frame should start at or after",
                        "format": "date-time"
                    },
                    "endsOnOrBefore": {
                        "type": "string",
                        "description": "When the time frame should end at or before",
                        "format": "date-time"
                    },
                    "businessUnitIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "Business units to calculate availability for",
                        "nullable": true
                    },
                    "jobTypeId": {
                        "type": "integer",
                        "description": "Job type whose duration should be used to calculate availability",
                        "format": "int64",
                        "nullable": true
                    },
                    "skillBasedAvailability": {
                        "type": "boolean",
                        "description": "Indicate whether to use skill-based availability matching"
                    }
                },
                "additionalProperties": false
            },
            "ExportResponse_Of_Dispatch.V2.ExportAppointmentAssignmentsResponse": {
                "required": [
                    "hasMore",
                    "continueFrom",
                    "data"
                ],
                "type": "object",
                "properties": {
                    "hasMore": {
                        "type": "boolean",
                        "description": "Indicates whether the export feed has reached its logical \"end\", or if there is more to export.\nTrue means the consumer can invoke another request right away using new continuation token value.\nFalse means there is now new data for the export, and the consumer should wait for some time (5-10 minutes)\nbefore making another request."
                    },
                    "continueFrom": {
                        "type": "string",
                        "description": "Continuation token used to resume the export operation. The value should be used in \"from\" query parameter of the following request."
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Dispatch.V2.ExportAppointmentAssignmentsResponse"
                        },
                        "description": "The collection of exported items, usually sorted chronologically based on modification date"
                    }
                },
                "additionalProperties": false,
                "description": "Represents export API response."
            },
            "Dispatch.V2.ExportAppointmentAssignmentsResponse": {
                "required": [
                    "id",
                    "technicianId",
                    "technicianName",
                    "assignedById",
                    "assignedOn",
                    "status",
                    "isPaused",
                    "jobId",
                    "appointmentId",
                    "createdOn",
                    "modifiedOn",
                    "active"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the appointment assignment",
                        "format": "int64"
                    },
                    "technicianId": {
                        "type": "integer",
                        "description": "ID of the technician",
                        "format": "int64"
                    },
                    "technicianName": {
                        "type": "string",
                        "description": "Name of the technician"
                    },
                    "assignedById": {
                        "type": "integer",
                        "description": "ID of the user who assigned the appointment assignment",
                        "format": "int64"
                    },
                    "assignedOn": {
                        "type": "string",
                        "description": "Date/time (in UTC) when the appointment assignment was assigned",
                        "format": "date-time"
                    },
                    "status": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Dispatch.V2.JobAppointmentAssignmentStatus"
                            }
                        ],
                        "description": "Status of the appointment assignment"
                    },
                    "isPaused": {
                        "type": "boolean",
                        "description": "Whether appointment assignment is paused"
                    },
                    "jobId": {
                        "type": "integer",
                        "description": "ID of the job",
                        "format": "int64"
                    },
                    "appointmentId": {
                        "type": "integer",
                        "description": "ID of the appointment",
                        "format": "int64"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "When the assignment was created (in UTC)",
                        "format": "date-time"
                    },
                    "modifiedOn": {
                        "type": "string",
                        "description": "When the assignment was modified (in UTC)",
                        "format": "date-time"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Indicate if assignment is active"
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.GetNonJobAppointmentResponse": {
                "required": [
                    "id",
                    "technicianId",
                    "start",
                    "name",
                    "duration",
                    "timesheetCodeId",
                    "summary",
                    "clearDispatchBoard",
                    "clearTechnicianView",
                    "removeTechnicianFromCapacityPlanning",
                    "allDay",
                    "showOnTechnicianSchedule",
                    "active",
                    "createdOn",
                    "createdById"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "technicianId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "start": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "duration": {
                        "type": "string",
                        "format": "duration"
                    },
                    "timesheetCodeId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "summary": {
                        "type": "string"
                    },
                    "clearDispatchBoard": {
                        "type": "boolean"
                    },
                    "clearTechnicianView": {
                        "type": "boolean"
                    },
                    "removeTechnicianFromCapacityPlanning": {
                        "type": "boolean"
                    },
                    "allDay": {
                        "type": "boolean"
                    },
                    "showOnTechnicianSchedule": {
                        "type": "boolean"
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "createdOn": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdById": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "additionalProperties": false
            },
            "PaginatedResponse_Of_Dispatch.V2.NonJobAppointmentResponse": {
                "required": [
                    "page",
                    "pageSize",
                    "hasMore",
                    "data"
                ],
                "type": "object",
                "properties": {
                    "page": {
                        "type": "integer",
                        "description": "From which page this output has started",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "Page size for this query (i.e. how many records were requested to return)",
                        "format": "int32"
                    },
                    "hasMore": {
                        "type": "boolean",
                        "description": "True if there are more records in the query than returned in this result"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total count of records for this query (can optionally be populated)",
                        "format": "int32",
                        "nullable": true
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Dispatch.V2.NonJobAppointmentResponse"
                        },
                        "description": "The collection of result items, will never have more than PageSize items"
                    }
                },
                "additionalProperties": false,
                "description": "Represents paginated API response."
            },
            "Dispatch.V2.NonJobAppointmentResponse": {
                "required": [
                    "id",
                    "technicianId",
                    "start",
                    "name",
                    "duration",
                    "timesheetCodeId",
                    "summary",
                    "clearDispatchBoard",
                    "clearTechnicianView",
                    "removeTechnicianFromCapacityPlanning",
                    "allDay",
                    "showOnTechnicianSchedule",
                    "active",
                    "createdOn",
                    "modifiedOn",
                    "createdById"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Non-job appointment id",
                        "format": "int64"
                    },
                    "technicianId": {
                        "type": "integer",
                        "description": "Non-job appointment's technician id",
                        "format": "int64"
                    },
                    "start": {
                        "type": "string",
                        "description": "Non-job appointment's start date/time (in UTC)",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string",
                        "description": "Non-job appointment name"
                    },
                    "duration": {
                        "type": "string",
                        "description": "Non-job appointment duration",
                        "format": "duration"
                    },
                    "timesheetCodeId": {
                        "type": "integer",
                        "description": "Unique Id of timesheet code",
                        "format": "int64"
                    },
                    "summary": {
                        "type": "string",
                        "description": "Non-job appointment summary"
                    },
                    "clearDispatchBoard": {
                        "type": "boolean",
                        "description": "Indicate if non-job appointment should be cleared from dispatch board once event is over"
                    },
                    "clearTechnicianView": {
                        "type": "boolean",
                        "description": "Indicate if non-job appointment should be cleared from technician's calendar once event is over"
                    },
                    "removeTechnicianFromCapacityPlanning": {
                        "type": "boolean",
                        "description": "Indicate if technician availability should be remove from legacy capacity planning"
                    },
                    "allDay": {
                        "type": "boolean",
                        "description": "Indicate if non-job appointment is scheduled for whole day"
                    },
                    "showOnTechnicianSchedule": {
                        "type": "boolean",
                        "description": "Whether the non-job appointment shows on the technicians schedule even if there is no timesheet"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Indicate if non-job appointment is active"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "When the appointment was created (in UTC)",
                        "format": "date-time"
                    },
                    "modifiedOn": {
                        "type": "string",
                        "description": "When the appointment was last modified (in UTC)",
                        "format": "date-time"
                    },
                    "createdById": {
                        "type": "integer",
                        "description": "ID of the user who created the non-job appointment",
                        "format": "int64"
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.Contracts.NonJobAppointment.CreateNonJobAppointmentResult": {
                "required": [
                    "id",
                    "technicianId",
                    "start",
                    "name",
                    "duration",
                    "timesheetCodeId",
                    "summary",
                    "clearDispatchBoard",
                    "clearTechnicianView",
                    "removeTechnicianFromCapacityPlanning",
                    "allDay",
                    "showOnTechnicianSchedule",
                    "active",
                    "createdOn",
                    "createdById",
                    "daysOfWeek"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Non-job appointment id",
                        "format": "int64"
                    },
                    "technicianId": {
                        "type": "integer",
                        "description": "Non-job appointment's technician id",
                        "format": "int64"
                    },
                    "start": {
                        "type": "string",
                        "description": "Non-job appointment's start date/time (in UTC)",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string",
                        "description": "Non-job appointment name"
                    },
                    "duration": {
                        "type": "string",
                        "description": "Non-job appointment duration",
                        "format": "duration"
                    },
                    "timesheetCodeId": {
                        "type": "integer",
                        "description": "Unique Id of timesheet code",
                        "format": "int64"
                    },
                    "summary": {
                        "type": "string",
                        "description": "Non-job appointment summary"
                    },
                    "clearDispatchBoard": {
                        "type": "boolean",
                        "description": "Indicate if non-job appointment should be cleared from dispatch board once event is over"
                    },
                    "clearTechnicianView": {
                        "type": "boolean",
                        "description": "Indicate if non-job appointment should be cleared from technician's calendar once event is over"
                    },
                    "removeTechnicianFromCapacityPlanning": {
                        "type": "boolean",
                        "description": "Indicate if technician availability should be remove from legacy capacity planning"
                    },
                    "allDay": {
                        "type": "boolean",
                        "description": "Indicate if non-job appointment is scheduled for whole day"
                    },
                    "showOnTechnicianSchedule": {
                        "type": "boolean",
                        "description": "Whether the non-job appointment shows on the technicians schedule even if there is no timesheet"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Indicate if non-job appointment is active"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "When the appointment was created (in UTC)",
                        "format": "date-time"
                    },
                    "createdById": {
                        "type": "integer",
                        "description": "ID of the user who created the non-job appointment",
                        "format": "int64"
                    },
                    "repeat": {
                        "type": "boolean",
                        "description": "Indicate if non-job appointment is repeating",
                        "nullable": true
                    },
                    "countOccurrences": {
                        "type": "integer",
                        "description": "Number of occurrences of the repeating non-job appointment",
                        "format": "int32",
                        "nullable": true
                    },
                    "interval": {
                        "type": "integer",
                        "description": "Interval of the repeating non-job appointment",
                        "format": "int32",
                        "nullable": true
                    },
                    "frequency": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Dispatch.Contracts.NonJobAppointment.RepeatFrequency"
                            }
                        ],
                        "description": "Frequency of the repeating non-job appointment",
                        "nullable": true
                    },
                    "endType": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Dispatch.Contracts.NonJobAppointment.RepeatEndType"
                            }
                        ],
                        "description": "End type of the repeating non-job appointment",
                        "nullable": true
                    },
                    "endOn": {
                        "type": "string",
                        "description": "End Date of the repeating non-job appointment",
                        "format": "date-time",
                        "nullable": true
                    },
                    "daysOfWeek": {
                        "type": "string",
                        "description": "Days of the week of the repeating non-job appointment"
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.Contracts.NonJobAppointment.RepeatFrequency": {
                "enum": [
                    "Daily",
                    "Weekly",
                    "Monthly",
                    "Yearly"
                ],
                "type": "string",
                "description": "",
                "x-enumNames": [
                    "Daily",
                    "Weekly",
                    "Monthly",
                    "Yearly"
                ]
            },
            "Dispatch.Contracts.NonJobAppointment.RepeatEndType": {
                "enum": [
                    "Never",
                    "After",
                    "On"
                ],
                "type": "string",
                "description": "",
                "x-enumNames": [
                    "Never",
                    "After",
                    "On"
                ]
            },
            "Dispatch.V2.CreateNonJobAppointmentRequest": {
                "required": [
                    "technicianId",
                    "start",
                    "duration",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "technicianId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "start": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "duration": {
                        "type": "string",
                        "format": "duration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "timesheetCodeId": {
                        "type": "integer",
                        "format": "int64",
                        "nullable": true
                    },
                    "summary": {
                        "type": "string",
                        "nullable": true
                    },
                    "clearDispatchBoard": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "clearTechnicianView": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "showOnTechnicianSchedule": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "removeTechnicianFromCapacityPlanning": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "allDay": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "repeat": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "countOccurrences": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "interval": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "frequency": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Dispatch.Contracts.NonJobAppointment.RepeatFrequency"
                            }
                        ],
                        "nullable": true
                    },
                    "endType": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Dispatch.Contracts.NonJobAppointment.RepeatEndType"
                            }
                        ],
                        "nullable": true
                    },
                    "endOn": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "daysOfWeek": {
                        "type": "string",
                        "nullable": true,
                        "example": "Monday, Wednesday, Friday"
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.NonJobAppointmentUpdateRequest": {
                "required": [
                    "technicianId",
                    "start",
                    "duration",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "technicianId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "start": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "duration": {
                        "type": "string",
                        "format": "duration"
                    },
                    "name": {
                        "type": "string"
                    },
                    "timesheetCodeId": {
                        "type": "integer",
                        "format": "int64",
                        "nullable": true
                    },
                    "summary": {
                        "type": "string",
                        "nullable": true
                    },
                    "clearDispatchBoard": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "clearTechnicianView": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "showOnTechnicianSchedule": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "removeTechnicianFromCapacityPlanning": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "allDay": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "repeat": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "countOccurrences": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "interval": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "frequency": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Dispatch.Contracts.NonJobAppointment.RepeatFrequency"
                            }
                        ],
                        "nullable": true
                    },
                    "endType": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Dispatch.Contracts.NonJobAppointment.RepeatEndType"
                            }
                        ],
                        "nullable": true
                    },
                    "endOn": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "daysOfWeek": {
                        "type": "string",
                        "nullable": true,
                        "example": "Monday, Wednesday, Friday"
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.Contracts.NonJobAppointment.DeleteNonJobAppointmentResult": {
                "required": [
                    "message",
                    "id"
                ],
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "additionalProperties": false
            },
            "PaginatedResponse_Of_Dispatch.V2.TeamResponse": {
                "required": [
                    "page",
                    "pageSize",
                    "hasMore",
                    "data"
                ],
                "type": "object",
                "properties": {
                    "page": {
                        "type": "integer",
                        "description": "From which page this output has started",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "Page size for this query (i.e. how many records were requested to return)",
                        "format": "int32"
                    },
                    "hasMore": {
                        "type": "boolean",
                        "description": "True if there are more records in the query than returned in this result"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total count of records for this query (can optionally be populated)",
                        "format": "int32",
                        "nullable": true
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Dispatch.V2.TeamResponse"
                        },
                        "description": "The collection of result items, will never have more than PageSize items"
                    }
                },
                "additionalProperties": false,
                "description": "Represents paginated API response."
            },
            "Dispatch.V2.TeamResponse": {
                "required": [
                    "id",
                    "active",
                    "createdOn",
                    "modifiedOn"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Unique id of the team record",
                        "format": "int64"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Whether the team is enabled"
                    },
                    "name": {
                        "type": "string",
                        "description": "Descriptive identifier",
                        "nullable": true
                    },
                    "createdBy": {
                        "type": "integer",
                        "description": "Created by User ID",
                        "format": "int64",
                        "nullable": true
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Created on date",
                        "format": "date-time"
                    },
                    "modifiedOn": {
                        "type": "string",
                        "description": "Modified on date",
                        "format": "date-time"
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.CreateTeamResponse": {
                "required": [
                    "id",
                    "active",
                    "createdOn",
                    "modifiedOn",
                    "created"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Unique id of the team record",
                        "format": "int64"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Whether the team is enabled"
                    },
                    "name": {
                        "type": "string",
                        "description": "Descriptive identifier",
                        "nullable": true
                    },
                    "createdBy": {
                        "type": "integer",
                        "description": "Created by User ID",
                        "format": "int64",
                        "nullable": true
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Created on date",
                        "format": "date-time"
                    },
                    "modifiedOn": {
                        "type": "string",
                        "description": "Modified on date",
                        "format": "date-time"
                    },
                    "created": {
                        "type": "boolean",
                        "description": "Whether the team was created or this is an existing record"
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.CreateTeamRequest": {
                "required": [
                    "active"
                ],
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Whether the team is enabled"
                    },
                    "name": {
                        "type": "string",
                        "description": "Descriptive identifier",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "PaginatedResponse_Of_Dispatch.V2.TechnicianShiftResponse": {
                "required": [
                    "page",
                    "pageSize",
                    "hasMore",
                    "data"
                ],
                "type": "object",
                "properties": {
                    "page": {
                        "type": "integer",
                        "description": "From which page this output has started",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "Page size for this query (i.e. how many records were requested to return)",
                        "format": "int32"
                    },
                    "hasMore": {
                        "type": "boolean",
                        "description": "True if there are more records in the query than returned in this result"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total count of records for this query (can optionally be populated)",
                        "format": "int32",
                        "nullable": true
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Dispatch.V2.TechnicianShiftResponse"
                        },
                        "description": "The collection of result items, will never have more than PageSize items"
                    }
                },
                "additionalProperties": false,
                "description": "Represents paginated API response."
            },
            "Dispatch.V2.TechnicianShiftResponse": {
                "required": [
                    "id",
                    "shiftType",
                    "title",
                    "active",
                    "technicianId",
                    "start",
                    "end",
                    "createdOn",
                    "modifiedOn"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Unique id of the shift record",
                        "format": "int64"
                    },
                    "shiftType": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Dispatch.V2.ShiftType"
                            }
                        ],
                        "description": "How the shift is displayed and contributes to availability calculations"
                    },
                    "title": {
                        "type": "string",
                        "description": "Descriptive identifier"
                    },
                    "note": {
                        "type": "string",
                        "description": "Optional detailed explanation of the shift",
                        "nullable": true
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Whether the shift is enabled"
                    },
                    "technicianId": {
                        "type": "integer",
                        "description": ">Unique id of the technician this shift applies to",
                        "format": "int64"
                    },
                    "start": {
                        "type": "string",
                        "description": "When the shift begins",
                        "format": "date-time"
                    },
                    "end": {
                        "type": "string",
                        "description": "When the shift ends",
                        "format": "date-time"
                    },
                    "timesheetCodeId": {
                        "type": "integer",
                        "description": "Timesheet code ID of shift",
                        "format": "int64",
                        "nullable": true
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "When the shift was created (in UTC)",
                        "format": "date-time"
                    },
                    "modifiedOn": {
                        "type": "string",
                        "description": "When the shift was modified (in UTC)",
                        "format": "date-time"
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.ShiftType": {
                "enum": [
                    "Normal",
                    "OnCall",
                    "TimeOff"
                ],
                "type": "string",
                "description": "",
                "x-enumNames": [
                    "Normal",
                    "OnCall",
                    "TimeOff"
                ]
            },
            "Dispatch.V2.TechnicianShiftCreateResponse": {
                "required": [
                    "created",
                    "technicianShifts"
                ],
                "type": "object",
                "properties": {
                    "created": {
                        "type": "boolean"
                    },
                    "technicianShifts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Dispatch.V2.TechnicianShiftResponse"
                        }
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.CreateTechnicianShiftRequest": {
                "required": [
                    "technicianIds",
                    "shiftType",
                    "title",
                    "start",
                    "end",
                    "repeatType"
                ],
                "type": "object",
                "properties": {
                    "technicianIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "shiftType": {
                        "$ref": "#/components/schemas/Dispatch.V2.ShiftType"
                    },
                    "title": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "start": {
                        "minLength": 1,
                        "type": "string",
                        "description": "When the shift begins",
                        "format": "date-time"
                    },
                    "end": {
                        "minLength": 1,
                        "type": "string",
                        "description": "When the shift ends",
                        "format": "date-time"
                    },
                    "note": {
                        "type": "string",
                        "description": "Optional detailed explanation of the shift",
                        "nullable": true
                    },
                    "timesheetCodeId": {
                        "type": "integer",
                        "description": "Timesheet code ID of shift",
                        "format": "int64",
                        "nullable": true
                    },
                    "repeatType": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Dispatch.V2.ShiftRepeatType"
                            }
                        ],
                        "description": "Repeat type of the shift (Never, Daily, Weekly)",
                        "example": "Weekly"
                    },
                    "repeatEndDate": {
                        "type": "string",
                        "description": "Date to stop repeating on",
                        "format": "date-time",
                        "nullable": true
                    },
                    "repeatInterval": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "shiftDays": {
                        "type": "string",
                        "description": "List of Days to repeat the shift on",
                        "nullable": true,
                        "example": "Monday, Wednesday, Friday"
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.ShiftRepeatType": {
                "enum": [
                    "Never",
                    "Daily",
                    "Weekly"
                ],
                "type": "string",
                "description": "",
                "x-enumNames": [
                    "Never",
                    "Daily",
                    "Weekly"
                ]
            },
            "Dispatch.V2.TechnicianShiftUpdateResponse": {
                "required": [
                    "technicianShifts"
                ],
                "type": "object",
                "properties": {
                    "technicianShifts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Dispatch.V2.TechnicianShiftResponse"
                        }
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.UpdateTechnicianShiftRequest": {
                "type": "object",
                "properties": {
                    "shiftType": {
                        "$ref": "#/components/schemas/Dispatch.V2.ShiftType"
                    },
                    "title": {
                        "type": "string"
                    },
                    "start": {
                        "type": "string",
                        "description": "When the shift begins",
                        "format": "date-time"
                    },
                    "end": {
                        "type": "string",
                        "description": "When the shift ends",
                        "format": "date-time"
                    },
                    "note": {
                        "type": "string",
                        "description": "Optional detailed explanation of the shift"
                    },
                    "timesheetCodeId": {
                        "type": "integer",
                        "description": "Timesheet code ID of shift",
                        "format": "int64",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.Contracts.TechnicianShift.DeleteTechnicianShiftResult": {
                "required": [
                    "message",
                    "id"
                ],
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.Contracts.TechnicianShift.BulkDeleteTechnicianShiftResult": {
                "required": [
                    "message",
                    "deletedIds"
                ],
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    },
                    "deletedIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.BulkDeleteTechnicianShiftRequest": {
                "required": [
                    "start",
                    "end"
                ],
                "type": "object",
                "properties": {
                    "start": {
                        "type": "string",
                        "description": "The start date for the range deletion",
                        "format": "date-time"
                    },
                    "end": {
                        "type": "string",
                        "description": "The end date for the range deletion",
                        "format": "date-time"
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.TechnicianTrackingResponse": {
                "required": [
                    "technicianTrackingUrl"
                ],
                "type": "object",
                "properties": {
                    "technicianTrackingUrl": {
                        "type": "string",
                        "description": "Url to allow tracking the technician's location"
                    }
                },
                "additionalProperties": false
            },
            "PaginatedResponse_Of_Dispatch.V2.ZoneResponse": {
                "required": [
                    "page",
                    "pageSize",
                    "hasMore",
                    "data"
                ],
                "type": "object",
                "properties": {
                    "page": {
                        "type": "integer",
                        "description": "From which page this output has started",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "Page size for this query (i.e. how many records were requested to return)",
                        "format": "int32"
                    },
                    "hasMore": {
                        "type": "boolean",
                        "description": "True if there are more records in the query than returned in this result"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total count of records for this query (can optionally be populated)",
                        "format": "int32",
                        "nullable": true
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Dispatch.V2.ZoneResponse"
                        },
                        "description": "The collection of result items, will never have more than PageSize items"
                    }
                },
                "additionalProperties": false,
                "description": "Represents paginated API response."
            },
            "Dispatch.V2.ZoneResponse": {
                "required": [
                    "id",
                    "active",
                    "createdBy",
                    "createdOn",
                    "modifiedOn",
                    "serviceDaysEnabled"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Unique id of the zone record",
                        "format": "int64"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Whether the zone is enabled"
                    },
                    "name": {
                        "type": "string",
                        "description": "Descriptive identifier",
                        "nullable": true
                    },
                    "zips": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of assigned zip codes to the zone",
                        "nullable": true
                    },
                    "cities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of assigned cities to the zone",
                        "nullable": true
                    },
                    "territoryNumbers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of assigned territory numbers to the zone",
                        "nullable": true
                    },
                    "locnNumbers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of assigned LOCN numbers to the zone",
                        "nullable": true
                    },
                    "createdBy": {
                        "type": "integer",
                        "description": "User ID who created the zone",
                        "format": "int64"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date/time (in UTC) the zone was created",
                        "format": "date-time"
                    },
                    "modifiedOn": {
                        "type": "string",
                        "description": "Date/time (in UTC) the zone was last modified",
                        "format": "date-time"
                    },
                    "serviceDaysEnabled": {
                        "type": "boolean",
                        "description": "Whether the service days option is enabled"
                    },
                    "serviceDays": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of assigned service days",
                        "nullable": true
                    },
                    "businessUnits": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "A list of assigned business units",
                        "nullable": true
                    },
                    "technicians": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "A list of assigned technicians",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.CreateOrUpdateZoneResponse": {
                "required": [
                    "id",
                    "active",
                    "name",
                    "zips",
                    "cities",
                    "territoryNumbers",
                    "locnNumbers",
                    "serviceDaysEnabled",
                    "serviceDaysIds",
                    "businessUnits"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Unique id of the zone record",
                        "format": "int64"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Whether the zone is enabled"
                    },
                    "name": {
                        "type": "string",
                        "description": "Descriptive identifier"
                    },
                    "zips": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of assigned zip codes to the zone"
                    },
                    "cities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of assigned cities to the zone"
                    },
                    "territoryNumbers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of assigned territory numbers to the zone"
                    },
                    "locnNumbers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of assigned LOCN numbers to the zone"
                    },
                    "serviceDaysEnabled": {
                        "type": "boolean",
                        "description": "Whether the service days option is enabled"
                    },
                    "serviceDaysIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "description": "A list of assigned service days"
                    },
                    "businessUnits": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "A list of assigned business units"
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.CreateOrUpdateZoneRequestArgs": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Descriptive identifier",
                        "nullable": true
                    },
                    "zips": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of assigned zip codes to the zone",
                        "nullable": true
                    },
                    "cities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of assigned cities to the zone",
                        "nullable": true
                    },
                    "territoryNumbers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of assigned territory numbers to the zone",
                        "nullable": true
                    },
                    "locnNumbers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of assigned LOCN numbers to the zone",
                        "nullable": true
                    },
                    "serviceDaysEnabled": {
                        "type": "boolean",
                        "description": "Whether the service days option is enabled",
                        "nullable": true
                    },
                    "serviceDaysIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "description": "A list of assigned service days",
                        "nullable": true
                    },
                    "businessUnits": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "A list of assigned business units",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CloudEvent_Of_Dispatch.V2.Webhook.TechnicianArrivedWebhookEvent": {
                "required": [
                    "specversion",
                    "id",
                    "type",
                    "time",
                    "source",
                    "userassignedid",
                    "datacontenttype",
                    "data"
                ],
                "type": "object",
                "properties": {
                    "specversion": {
                        "type": "string",
                        "description": "The version of the CloudEvents specification used by this event (\"1.0\")."
                    },
                    "id": {
                        "type": "string",
                        "description": "A value that uniquely identifies this event. Consumers should assume that events with the same source and id are duplicates."
                    },
                    "type": {
                        "type": "string",
                        "description": "A value that identifies the type of this event (\"tn.dis.technician-arrived\")."
                    },
                    "time": {
                        "type": "string",
                        "description": "The date and time when this event occurred.",
                        "format": "date-time"
                    },
                    "source": {
                        "type": "string",
                        "description": "A URI that identifies the source of this event (\"https://webhooks.servicetitan.io\")."
                    },
                    "userassignedid": {
                        "type": "string",
                        "description": "A value that identifies this event. This value is for diagnostic purposes only, and it may or may not be unique."
                    },
                    "datacontenttype": {
                        "type": "string",
                        "description": "The content type of the data (\"application/json\")."
                    },
                    "data": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Dispatch.V2.Webhook.TechnicianArrivedWebhookEvent"
                            }
                        ],
                        "description": "The event payload."
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.Webhook.TechnicianArrivedWebhookEvent": {
                "required": [
                    "job",
                    "appointment",
                    "tenantId",
                    "tenantName"
                ],
                "type": "object",
                "properties": {
                    "job": {
                        "$ref": "#/components/schemas/Dispatch.V2.Webhook.Job"
                    },
                    "appointment": {
                        "$ref": "#/components/schemas/Dispatch.V2.Webhook.JobAppointment"
                    },
                    "tenantId": {
                        "type": "integer",
                        "description": "The ID of the tenant",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string",
                        "description": "The name of the tenant"
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.Webhook.Job": {
                "required": [
                    "id",
                    "jobNumber",
                    "projectId",
                    "customerId",
                    "locationId",
                    "jobStatus",
                    "businessUnitId",
                    "jobTypeId",
                    "priority",
                    "campaignId",
                    "firstAppointmentId",
                    "lastAppointmentId",
                    "jobGeneratedLeadSource",
                    "noCharge",
                    "notificationsEnabled",
                    "createdById",
                    "modifiedOn",
                    "total"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "jobNumber": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "customerId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "locationId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "jobStatus": {
                        "type": "string"
                    },
                    "completedOn": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "businessUnitId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "jobTypeId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "priority": {
                        "type": "string"
                    },
                    "campaignId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "appointmentCount": {
                        "type": "integer",
                        "format": "int64",
                        "nullable": true
                    },
                    "firstAppointmentId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "lastAppointmentId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "recallForId": {
                        "type": "integer",
                        "format": "int64",
                        "nullable": true
                    },
                    "warrantyId": {
                        "type": "integer",
                        "format": "int64",
                        "nullable": true
                    },
                    "jobGeneratedLeadSource": {
                        "$ref": "#/components/schemas/Dispatch.V2.Webhook.JobGeneratedLeadSource"
                    },
                    "noCharge": {
                        "type": "boolean"
                    },
                    "notificationsEnabled": {
                        "type": "boolean"
                    },
                    "createdOn": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "createdById": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "modifiedOn": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "tagTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "nullable": true
                    },
                    "leadCallId": {
                        "type": "integer",
                        "format": "int64",
                        "nullable": true
                    },
                    "bookingId": {
                        "type": "integer",
                        "format": "int64",
                        "nullable": true
                    },
                    "soldById": {
                        "type": "integer",
                        "format": "int64",
                        "nullable": true
                    },
                    "customerPo": {
                        "type": "string",
                        "nullable": true
                    },
                    "invoiceId": {
                        "type": "integer",
                        "format": "int64",
                        "nullable": true
                    },
                    "membershipId": {
                        "type": "integer",
                        "format": "int64",
                        "nullable": true
                    },
                    "total": {
                        "type": "number",
                        "format": "decimal"
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.Webhook.JobGeneratedLeadSource": {
                "type": "object",
                "properties": {
                    "jobId": {
                        "type": "integer",
                        "format": "int64",
                        "nullable": true
                    },
                    "employeeId": {
                        "type": "integer",
                        "format": "int64",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.Webhook.JobAppointment": {
                "required": [
                    "id",
                    "appointmentNumber",
                    "start",
                    "end",
                    "duration"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "appointmentNumber": {
                        "type": "string"
                    },
                    "scheduledOn": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "start": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "end": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "duration": {
                        "type": "number",
                        "format": "double"
                    },
                    "arrivalWindowStart": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "arrivalWindowEnd": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "externalId": {
                        "type": "string",
                        "nullable": true
                    },
                    "manageEmployeeEmail": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "manageFollowUpEmail": {
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CloudEvent_Of_Dispatch.V2.Webhook.TechnicianDispatchedWebhookEvent": {
                "required": [
                    "specversion",
                    "id",
                    "type",
                    "time",
                    "source",
                    "userassignedid",
                    "datacontenttype",
                    "data"
                ],
                "type": "object",
                "properties": {
                    "specversion": {
                        "type": "string",
                        "description": "The version of the CloudEvents specification used by this event (\"1.0\")."
                    },
                    "id": {
                        "type": "string",
                        "description": "A value that uniquely identifies this event. Consumers should assume that events with the same source and id are duplicates."
                    },
                    "type": {
                        "type": "string",
                        "description": "A value that identifies the type of this event (\"tn.dis.technician-dispatched\")."
                    },
                    "time": {
                        "type": "string",
                        "description": "The date and time when this event occurred.",
                        "format": "date-time"
                    },
                    "source": {
                        "type": "string",
                        "description": "A URI that identifies the source of this event (\"https://webhooks.servicetitan.io\")."
                    },
                    "userassignedid": {
                        "type": "string",
                        "description": "A value that identifies this event. This value is for diagnostic purposes only, and it may or may not be unique."
                    },
                    "datacontenttype": {
                        "type": "string",
                        "description": "The content type of the data (\"application/json\")."
                    },
                    "data": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Dispatch.V2.Webhook.TechnicianDispatchedWebhookEvent"
                            }
                        ],
                        "description": "The event payload."
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.Webhook.TechnicianDispatchedWebhookEvent": {
                "required": [
                    "job",
                    "appointment",
                    "tenantId",
                    "tenantName"
                ],
                "type": "object",
                "properties": {
                    "job": {
                        "$ref": "#/components/schemas/Dispatch.V2.Webhook.Job"
                    },
                    "appointment": {
                        "$ref": "#/components/schemas/Dispatch.V2.Webhook.JobAppointment"
                    },
                    "tenantId": {
                        "type": "integer",
                        "description": "The ID of the tenant",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string",
                        "description": "The name of the tenant"
                    }
                },
                "additionalProperties": false
            },
            "CloudEvent_Of_Dispatch.V2.Webhook.ZoneDeletedWebhookEvent": {
                "required": [
                    "specversion",
                    "id",
                    "type",
                    "time",
                    "source",
                    "userassignedid",
                    "datacontenttype",
                    "data"
                ],
                "type": "object",
                "properties": {
                    "specversion": {
                        "type": "string",
                        "description": "The version of the CloudEvents specification used by this event (\"1.0\")."
                    },
                    "id": {
                        "type": "string",
                        "description": "A value that uniquely identifies this event. Consumers should assume that events with the same source and id are duplicates."
                    },
                    "type": {
                        "type": "string",
                        "description": "A value that identifies the type of this event (\"tn.dis.zone-deleted\")."
                    },
                    "time": {
                        "type": "string",
                        "description": "The date and time when this event occurred.",
                        "format": "date-time"
                    },
                    "source": {
                        "type": "string",
                        "description": "A URI that identifies the source of this event (\"https://webhooks.servicetitan.io\")."
                    },
                    "userassignedid": {
                        "type": "string",
                        "description": "A value that identifies this event. This value is for diagnostic purposes only, and it may or may not be unique."
                    },
                    "datacontenttype": {
                        "type": "string",
                        "description": "The content type of the data (\"application/json\")."
                    },
                    "data": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Dispatch.V2.Webhook.ZoneDeletedWebhookEvent"
                            }
                        ],
                        "description": "The event payload."
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.Webhook.ZoneDeletedWebhookEvent": {
                "required": [
                    "zone",
                    "tenantId",
                    "tenantName"
                ],
                "type": "object",
                "properties": {
                    "zone": {
                        "$ref": "#/components/schemas/Dispatch.V2.Webhook.Zone"
                    },
                    "tenantId": {
                        "type": "integer",
                        "description": "The ID of the tenant",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string",
                        "description": "The name of the tenant"
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.Webhook.Zone": {
                "required": [
                    "id",
                    "serviceDaysEnabled",
                    "active"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "color": {
                        "type": "string",
                        "nullable": true
                    },
                    "zips": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "cities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "territoryNumbers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "locnNumbers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "businessUnits": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "nullable": true
                    },
                    "serviceDaysEnabled": {
                        "type": "boolean"
                    },
                    "serviceDaysIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "nullable": true
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "maxDriveTimeAdjustment": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CloudEvent_Of_Dispatch.V2.Webhook.ZoneUpdatedWebhookEvent": {
                "required": [
                    "specversion",
                    "id",
                    "type",
                    "time",
                    "source",
                    "userassignedid",
                    "datacontenttype",
                    "data"
                ],
                "type": "object",
                "properties": {
                    "specversion": {
                        "type": "string",
                        "description": "The version of the CloudEvents specification used by this event (\"1.0\")."
                    },
                    "id": {
                        "type": "string",
                        "description": "A value that uniquely identifies this event. Consumers should assume that events with the same source and id are duplicates."
                    },
                    "type": {
                        "type": "string",
                        "description": "A value that identifies the type of this event (\"tn.dis.zone-updated\")."
                    },
                    "time": {
                        "type": "string",
                        "description": "The date and time when this event occurred.",
                        "format": "date-time"
                    },
                    "source": {
                        "type": "string",
                        "description": "A URI that identifies the source of this event (\"https://webhooks.servicetitan.io\")."
                    },
                    "userassignedid": {
                        "type": "string",
                        "description": "A value that identifies this event. This value is for diagnostic purposes only, and it may or may not be unique."
                    },
                    "datacontenttype": {
                        "type": "string",
                        "description": "The content type of the data (\"application/json\")."
                    },
                    "data": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Dispatch.V2.Webhook.ZoneUpdatedWebhookEvent"
                            }
                        ],
                        "description": "The event payload."
                    }
                },
                "additionalProperties": false
            },
            "Dispatch.V2.Webhook.ZoneUpdatedWebhookEvent": {
                "required": [
                    "zone",
                    "tenantId",
                    "tenantName"
                ],
                "type": "object",
                "properties": {
                    "zone": {
                        "$ref": "#/components/schemas/Dispatch.V2.Webhook.Zone"
                    },
                    "tenantId": {
                        "type": "integer",
                        "description": "The ID of the tenant",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string",
                        "description": "The name of the tenant"
                    }
                },
                "additionalProperties": false
            }
        },
        "securitySchemes": {
            "apiKeyHeader": {
                "type": "apiKey",
                "name": "ST-App-Key",
                "in": "header"
            },
            "apiKeyQuery": {
                "type": "apiKey",
                "name": "servicetitanapplicationkey",
                "in": "query"
            }
        }
    },
    "security": [
        {
            "apiKeyHeader": []
        },
        {
            "apiKeyQuery": []
        }
    ]
}